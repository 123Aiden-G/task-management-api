{
	"info": {
		"_postman_id": "2fee1d50-e5c6-4e3d-acec-c73b67f55427",
		"name": "API Test",
		"description": "# Auth Endpoints\n\nThis folder contains the endpoints for user authentication and account management. The following endpoints will be tested:\n\n1. **Register User**\n    \n    - **Method:** POST\n        \n    - **URL:** `/api/auth/register`\n        \n    - **Description:** Registers a new user with the provided name, email, and password.\n        \n2. **Login User**\n    \n    - **Method:** POST\n        \n    - **URL:** `/api/auth/login`\n        \n    - **Description:** Logs in an existing user with the provided email and password, returning a JWT token.\n        \n3. **Delete My Account**\n    \n    - **Method:** DELETE\n        \n    - **URL:** `/api/auth/me`\n        \n    - **Description:** Permanently deletes the authenticated user's account and associated tasks. Requires authentication.\n        \n4. **Recover My Account**\n    \n    - **Method:** PUT\n        \n    - **URL:** `/api/auth/recover`\n        \n    - **Description:** Recovers the authenticated user's account if it was previously deleted. Requires authentication.\n        \n5. **Update My Profile**\n    \n    - **Method:** PUT\n        \n    - **URL:** `/api/auth/me`\n        \n    - **Description:** Updates the authenticated user's profile information such as name, email, and password. Requires authentication.\n        \n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40482354"
	},
	"item": [
		{
			"name": "Auth EndPoints",
			"item": [
				{
					"name": "User registration",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### API Endpoint Description\n\nThis endpoint is used to register a new user for authentication.\n\n### Request\n\n- Method: POST\n    \n- Endpoint: `https://task-management-api-ypwj.onrender.com/api/auth/register`\n    \n- Body:\n    \n    - `name` (text, required): The name of the user.\n        \n    - `email` (text, required): The email address of the user.\n        \n    - `password` (text, required): The password for the user's account.\n        \n\n### Response\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"message\": \"\"}\n    \n\n### Example\n\n#### Request\n\n``` json\n{\n    \"name\": \"Governor Alorzuke\",\n    \"email\": \"governortate5@gmail.com\",\n    \"password\": \"Password@123\"\n}\n\n ```\n\n#### Response\n\n``` json\n{\n    \"success\": true,\n    \"message\": \"\"\n}\n\n ```\n\nThis endpoint allows users to register with the application.\n\n#### Request Body\n\n- `name` (string) - The name of the user.\n    \n- `email` (string) - The email address of the user.\n    \n- `password` (string) - The password for the user account.\n    \n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\n- `success` (boolean) - Indicates the success of the registration process.\n    \n- `message` (string) - A message related to the registration process.\n    \n\nUpon successful registration, the response will have a status code of 201 (Created) and an empty message."
					},
					"response": []
				},
				{
					"name": "User Login",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Auth Login\n\nThis endpoint allows users to authenticate and obtain a token for accessing protected resources.\n\n#### Request\n\n- Method: POST\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/auth/login`\n    \n- Body:\n    \n    - email (text, required): The email of the user.\n        \n    - password (text, required): The password of the user.\n        \n\nExample:\n\n``` json\n{\n    \"email\": \"user@example.com\",\n    \"password\": \"examplePassword\"\n}\n\n ```\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- Body:\n    \n    - success (boolean): Indicates if the authentication was successful.\n        \n    - token (string): The authentication token for accessing protected resources.\n        \n    - data (object):\n        \n        - id (string): The user's ID.\n            \n        - name (string): The user's name.\n            \n        - email (string): The user's email.\n            \n    - message (string): Additional information or error message.\n        \n\nExample:\n\n``` json\n{\n    \"success\": true,\n    \"token\": \"exampleToken\",\n    \"data\": {\n        \"id\": \"userID\",\n        \"name\": \"John Doe\",\n        \"email\": \"user@example.com\"\n    },\n    \"message\": \"Authentication successful\"\n}\n\n ```\n\nThis API endpoint is used to authenticate and login a user.\n\n#### Request Body\n\n- email (text, required): The email of the user.\n    \n- password (text, required): The password of the user.\n    \n\n#### Response\n\n- success (boolean): Indicates if the login was successful.\n    \n- token (string): The authentication token.\n    \n- data (object): An object containing user information including id, name, and email.\n    \n- message (string): Any additional message related to the login process."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### DELETE /api/auth/me\n\nThis endpoint is used to delete the authenticated user's account.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\nExample response body:\n\n``` json\n{\n    \"success\": true,\n    \"message\": \"\"\n}\n\n ```\n\nThis endpoint is used to delete the user's own account.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n- success (boolean): Indicates if the request was successful.\n    \n- message (string): An optional message from the server.\n    \n\nExample response:\n\n``` json\n{\n  \"success\": true,\n  \"message\": \"Your account has been deleted successfully. You have 30 days to recover it.\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Recover Account",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Recover Account\n\nThis endpoint is used to recover a user's account.\n\n**Request**\n\n- Method: PUT\n    \n- Endpoint: `https://task-management-api-ypwj.onrender.com/api/auth/recover`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- No request body parameters required.\n    \n\n**Response**\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"message\": \"\" }\n    \n\nExample:\n\n``` json\n{\n    \"success\": true,\n    \"message\": \"\"\n}\n\n ```\n\nThis endpoint is used to initiate the account recovery process.\n\n**Request Body**\n\n- No request body is required for this endpoint.\n    \n\n**Response**\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"message\": \"\"}\n    \n    - `success` (boolean): Indicates whether the recovery process was initiated successfully.\n        \n    - `message` (string): A message related to the recovery process, if any.\n        \n\nThis endpoint is used to recover a user's account.\n\n**Request Body**\n\n- No request body is required for this endpoint.\n    \n\n**Response**\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"message\": \"\"}"
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Update User Information\n\nThis endpoint allows the user to update their information.\n\n#### Request\n\n- Method: PUT\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/auth/me`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- Body:\n    \n    - name (string, required): The updated name of the user.\n        \n    - password (string, required): The updated password of the user.\n        \n\nExample:\n\n``` json\n{\n    \"name\": \"Updated Name\",\n    \"password\": \"updatedPassword@123\"\n}\n\n ```\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- Body:\n    \n    - success (boolean): Indicates if the request was successful.\n        \n    - message (string): A message related to the request.\n        \n    - token (string): The updated token.\n        \n\nExample:\n\n``` json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"token\": \"updatedTokenValue\"\n}\n\n ```\n\nThis endpoint allows the user to update their information.\n\n**Request**\n\n- Method: PUT\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/auth/me`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- Body:\n    \n    - name (text, required): The updated name of the user.\n        \n    - password (text, required): The updated password for the user.\n        \n\n**Example**\n\n``` json\n{\n    \"name\": \"Updated User Name\",\n    \"password\": \"newPassword@123\"\n}\n\n ```\n\n**Response**\n\n- Status: 200\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- { \"success\": true, \"message\": \"\", \"token\": \"\" }\n    \n\nThis endpoint allows the user to update their information.\n\n#### Request Body\n\n- name (text, required): The updated name of the user.\n    \n- password (text, required): The updated password of the user.\n    \n\n#### Response\n\nThe response is a JSON object with the following properties:\n\n- success (boolean): Indicates if the request was successful.\n    \n- message (string): A message from the server, if any.\n    \n- token (string): The updated token, if applicable.\n    \n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"token\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "# Auth Endpoints\n\nThis folder contains the endpoints for user authentication and account management. The following endpoints will be tested:\n\n1. **Register User**\n    \n    - **Method:** POST\n        \n    - **URL:** `/api/auth/register`\n        \n    - **Description:** Registers a new user with the provided name, email, and password.\n        \n2. **Login User**\n    \n    - **Method:** POST\n        \n    - **URL:** `/api/auth/login`\n        \n    - **Description:** Logs in an existing user with the provided email and password, returning a JWT token.\n        \n3. **Delete My Account**\n    \n    - **Method:** DELETE\n        \n    - **URL:** `/api/auth/me`\n        \n    - **Description:** Permanently deletes the authenticated user's account and associated tasks. Requires authentication.\n        \n4. **Recover My Account**\n    \n    - **Method:** PUT\n        \n    - **URL:** `/api/auth/recover`\n        \n    - **Description:** Recovers the authenticated user's account if it was previously deleted. Requires authentication.\n        \n5. **Update My Profile**\n    \n    - **Method:** PUT\n        \n    - **URL:** `/api/auth/me`\n        \n    - **Description:** Updates the authenticated user's profile information such as name, email, and password. Requires authentication.\n        \n\n---"
		},
		{
			"name": "Task EndPoints",
			"item": [
				{
					"name": "Login user",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Auth Login\n\nThis endpoint allows users to log in and obtain an authentication token.\n\n#### Request\n\n- Method: POST\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/auth/login`\n    \n- Body:\n    \n    - email (text, required): The email of the user.\n        \n    - password (text, required): The password of the user.\n        \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"token\": \"\", \"data\": { \"id\": \"\", \"name\": \"\", \"email\": \"\" }, \"message\": \"\"}\n    \n\n#### Example\n\n``` json\n// Request\nPOST https://task-management-api-ypwj.onrender.com/api/auth/login\nContent-Type: application/json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"examplePassword\"\n}\n// Response\n{\n  \"success\": true,\n  \"token\": \"exampleToken\",\n  \"data\": {\n    \"id\": \"userId\",\n    \"name\": \"userName\",\n    \"email\": \"user@example.com\"\n  },\n  \"message\": \"Login successful\"\n}\n\n ```\n\n### Request Body\n\n- The request body should be in JSON format with the following parameters:\n    \n    - `email`: (string) The email of the user.\n        \n    - `password`: (string) The password of the user.\n        \n\n### Response\n\nThe response to this request will be a JSON object with the following properties:\n\n- `success`: (boolean) Indicates whether the login was successful.\n    \n- `token`: (string) The authentication token for the logged-in user.\n    \n- `data`: (object) An object containing the details of the logged-in user, including:\n    \n    - `id`: (string) The user's unique identifier.\n        \n    - `name`: (string) The name of the user.\n        \n    - `email`: (string) The email of the user.\n        \n- `message`: (string) A message related to the login operation.\n    \n\n### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\"\n    },\n    \"token\": {\n      \"type\": \"string\"\n    },\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Create task",
					"request": {
						"method": "GET",
						"header": [],
						"description": "## API Request Description\n\nThis POST request is used to create a new task by providing the title, description, status, priority, due date, and category of the task.\n\n## Request Body\n\n- title (string, required): The title of the task.\n    \n- description (string, required): The description of the task.\n    \n- status (string, required): The status of the task (e.g., in-progress, completed, pending).\n    \n- priority (string, required): The priority of the task (e.g., high, medium, low).\n    \n- dueDate (string, required): The due date and time for the task.\n    \n- category (string, required): The category of the task (e.g., work, personal, study).\n    \n\n## Example Request\n\n```\n{\n  \"title\": \"API test\",\n  \"description\": \"Documentation of API\",\n  \"status\": \"in-progress\",\n  \"priority\": \"high\",\n  \"dueDate\": \"2024-12-24T18:00:00.000Z\",\n  \"category\": \"work\"\n}\n\n ```\n\n## Response\n\nUpon successful creation, the server responds with status code 201 and a JSON object containing the success status, task data, and an optional message.\n\n- success (boolean): Indicates if the request was successful.\n    \n- data (object): Contains the details of the created task, including title, description, status, due date, category, priority, and other metadata.\n    \n- message (string): An optional message from the server.\n    \n\nExample Response:\n\n```\n{\n  \"success\": true,\n  \"data\": {\n    \"title\": \"\",\n    \"description\": \"\",\n    \"status\": \"\",\n    \"dueDate\": \"\",\n    \"category\": \"\",\n    \"assignedTo\": \"\",\n    \"priority\": \"\",\n    \"deleted\": true,\n    \"deletedAt\": null,\n    \"archived\": true,\n    \"_id\": \"\",\n    \"comments\": [],\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"__v\": 0\n  },\n  \"message\": \"\"\n}\n\n ```\n\nThis endpoint allows the client to create a new task.\n\n#### Request Body\n\n- title (string, required): The title of the task.\n    \n- description (string, required): The description of the task.\n    \n- status (string, required): The status of the task (e.g. in-progress, completed, pending).\n    \n- priority (string, required): The priority of the task (e.g. high, medium, low).\n    \n- dueDate (string, required): The due date of the task.\n    \n- category (string, required): The category of the task.\n    \n\n#### Response\n\nThe response will be in JSON format with the following schema:\n\n``` json\n{\n  \"success\": true,\n  \"data\": {\n    \"title\": \"\",\n    \"description\": \"\",\n    \"status\": \"\",\n    \"dueDate\": \"\",\n    \"category\": \"\",\n    \"assignedTo\": \"\",\n    \"priority\": \"\",\n    \"deleted\": true,\n    \"deletedAt\": null,\n    \"archived\": true,\n    \"_id\": \"\",\n    \"comments\": [],\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"__v\": 0\n  },\n  \"message\": \"\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Retrieve task",
					"request": {
						"method": "GET",
						"header": [],
						"description": "# Get Tasks\n\nThis endpoint retrieves a list of tasks.\n\n## Request\n\n### Endpoint\n\n`GET` [https://task-management-api-ypwj.onrender.com/api/tasks](https://task-management-api-ypwj.onrender.com/api/tasks)\n\n## Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"success\": true,\n    \"data\": [\n        {\n            \"_id\": \"\",\n            \"title\": \"\",\n            \"description\": \"\",\n            \"status\": \"\",\n            \"dueDate\": \"\",\n            \"category\": \"\",\n            \"assignedTo\": {\n                \"_id\": \"\",\n                \"name\": \"\",\n                \"email\": \"\"\n            },\n            \"priority\": \"\",\n            \"deleted\": true,\n            \"deletedAt\": null,\n            \"archived\": true,\n            \"comments\": [],\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"__v\": 0\n        }\n    ],\n    \"pagination\": {\n        \"total\": 0,\n        \"page\": 0,\n        \"limit\": 0,\n        \"totalPages\": 0\n    },\n    \"message\": \"\"\n}\n\n ```\n\nThis endpoint retrieves a list of tasks.\n\n#### Request\n\nThis request does not require any request body.\n\n#### Response\n\nThe response will be in JSON format and will have the following schema:\n\n``` json\n{\n  \"success\": boolean,\n  \"data\": [\n    {\n      \"_id\": string,\n      \"title\": string,\n      \"description\": string,\n      \"status\": string,\n      \"dueDate\": string,\n      \"category\": string,\n      \"assignedTo\": {\n        \"_id\": string,\n        \"name\": string,\n        \"email\": string\n      },\n      \"priority\": string,\n      \"deleted\": boolean,\n      \"deletedAt\": string or null,\n      \"archived\": boolean,\n      \"comments\": array,\n      \"createdAt\": string,\n      \"updatedAt\": string,\n      \"__v\": number\n    }\n  ],\n  \"pagination\": {\n    \"total\": number,\n    \"page\": number,\n    \"limit\": number,\n    \"totalPages\": number\n  },\n  \"message\": string\n}\n\nask by its ID. Requires authentication.\n\n ```\n\n``` json\nYou can also retrieve task by ID\n\nMethod: GET\nURL: /api/tasks/{id}\nDescription: Retrieves the details of a specific t\n\n ```"
					},
					"response": []
				},
				{
					"name": "Update task",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Update Task\n\nThis endpoint allows updating a specific task identified by the provided task ID.\n\n#### Request\n\n- Method: PUT\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/tasks/676af1bcaca3c1ab04cb0650`\n    \n- { \"title\": \"task-management-api Test\" }\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"data\": { \"_id\": \"\", \"title\": \"\", \"description\": \"\", \"status\": \"\", \"dueDate\": \"\", \"category\": \"\", \"assignedTo\": \"\", \"priority\": \"\", \"deleted\": true, \"deletedAt\": null, \"archived\": true, \"comments\": \\[\\], \"createdAt\": \"\", \"updatedAt\": \"\", \"__v\": 0 }, \"message\": \"\" }\n    \n\nThis endpoint allows the client to update the details of a specific task.\n\n#### Request Body\n\n- title (string, required): The updated title of the task.\n    \n\n#### Response\n\nThe response will be in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"_id\": {\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\"\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                },\n                \"status\": {\n                    \"type\": \"string\"\n                },\n                \"dueDate\": {\n                    \"type\": \"string\"\n                },\n                \"category\": {\n                    \"type\": \"string\"\n                },\n                \"assignedTo\": {\n                    \"type\": \"string\"\n                },\n                \"priority\": {\n                    \"type\": \"string\"\n                },\n                \"deleted\": {\n                    \"type\": \"boolean\"\n                },\n                \"deletedAt\": {\n                    \"type\": [\"string\", \"null\"]\n                },\n                \"archived\": {\n                    \"type\": \"boolean\"\n                },\n                \"comments\": {\n                    \"type\": \"array\",\n                    \"items\": {}\n                },\n                \"createdAt\": {\n                    \"type\": \"string\"\n                },\n                \"updatedAt\": {\n                    \"type\": \"string\"\n                },\n                \"__v\": {\n                    \"type\": \"number\"\n                }\n            }\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "add comment",
					"request": {
						"method": "GET",
						"header": [],
						"description": "# API Request: Create Comment on Task\n\nCreates a new comment for a specific task.\n\n## Request\n\n### Endpoint\n\n`POST https://task-management-api-ypwj.onrender.com/api/tasks/676af1bcaca3c1ab04cb0650/comments`\n\n### Request Body\n\n- Type: JSON\n    \n    - `comment`: (string) The comment to be added.\n        \n\n## Response\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n\n### Response Body\n\n``` json\n{\n    \"success\": true,\n    \"data\": {\n        \"_id\": \"\",\n        \"title\": \"\",\n        \"description\": \"\",\n        \"status\": \"\",\n        \"dueDate\": \"\",\n        \"category\": \"\",\n        \"assignedTo\": \"\",\n        \"priority\": \"\",\n        \"deleted\": true,\n        \"deletedAt\": null,\n        \"archived\": true,\n        \"comments\": [\n            {\n                \"user\": \"\",\n                \"comment\": \"\",\n                \"_id\": \"\",\n                \"createdAt\": \"\"\n            }\n        ],\n        \"createdAt\": \"\",\n        \"updatedAt\": \"\",\n        \"__v\": 0\n    },\n    \"message\": \"\"\n}\n\n ```\n\n### Response Body Explanation\n\n- `success`: Indicates if the request was successful.\n    \n- `data`: Object containing the updated task details.\n    \n- `message`: Additional information or error message.\n    \n\n## Example\n\n### Request\n\n``` json\n{\n    \"comment\": \"This is a new comment\"\n}\n\n ```\n\n### Response\n\n``` json\n{\n    \"success\": true,\n    \"data\": {\n        \"_id\": \"task_id\",\n        \"title\": \"Task Title\",\n        \"description\": \"Task Description\",\n        \"status\": \"Pending\",\n        \"dueDate\": \"2022-12-31\",\n        \"category\": \"Work\",\n        \"assignedTo\": \"John Doe\",\n        \"priority\": \"High\",\n        \"deleted\": false,\n        \"deletedAt\": null,\n        \"archived\": false,\n        \"comments\": [\n            {\n                \"user\": \"User123\",\n                \"comment\": \"This is a new comment\",\n                \"_id\": \"comment_id\",\n                \"createdAt\": \"2022-10-15T08:00:00Z\"\n            }\n        ],\n        \"createdAt\": \"2022-10-01T12:00:00Z\",\n        \"updatedAt\": \"2022-10-15T08:00:00Z\",\n        \"__v\": 1\n    },\n    \"message\": \"Comment added successfully\"\n}\n\n ```\n\nThis API endpoint allows the client to add a comment to a specific task identified by the task ID in the URL.\n\n### API Response JSON Schema\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"_id\": {\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\"\n                },\n                \"description\": {\n                    \"type\": \"string\"\n                },\n                \"status\": {\n                    \"type\": \"string\"\n                },\n                \"dueDate\": {\n                    \"type\": \"string\"\n                },\n                \"category\": {\n                    \"type\": \"string\"\n                },\n                \"assignedTo\": {\n                    \"type\": \"string\"\n                },\n                \"priority\": {\n                    \"type\": \"string\"\n                },\n                \"deleted\": {\n                    \"type\": \"boolean\"\n                },\n                \"deletedAt\": {\n                    \"type\": [\"string\", \"null\"]\n                },\n                \"archived\": {\n                    \"type\": \"boolean\"\n                },\n                \"comments\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"user\": {\n                                \"type\": \"string\"\n                            },\n                            \"comment\": {\n                                \"type\": \"string\"\n                            },\n                            \"_id\": {\n                                \"type\": \"string\"\n                            },\n                            \"createdAt\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"createdAt\": {\n                    \"type\": \"string\"\n                },\n                \"updatedAt\": {\n                    \"type\": \"string\"\n                },\n                \"__v\": {\n                    \"type\": \"number\"\n                }\n            }\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "1. Task Endpoints  \n    This folder contains the endpoints for managing tasks. The following endpoints will be tested:\n    \n2. Create Task\n    \n3. Method: POST  \n    URL: /api/tasks  \n    Description: Creates a new task with the provided title, description, and due date. Requires authentication.  \n    Get All Tasks\n    \n4. Method: GET  \n    URL: /api/tasks  \n    Description: Retrieves a list of all tasks for the authenticated user. Requires authentication.  \n    Get Task by ID\n    \n5. Method: GET  \n    URL: /api/tasks/{id}  \n    Description: Retrieves the details of a specific task by its ID. Requires authentication.  \n    Update Task\n    \n6. Method: PUT  \n    URL: /api/tasks/{id}  \n    Description: Updates the details of a specific task by its ID. Requires authentication.  \n    Delete Task\n    \n7. Method: DELETE  \n    URL: /api/tasks/{id}  \n    Description: Deletes a specific task by its ID. Requires authentication.  \n    Assign Task\n    \n8. Method: POST  \n    URL: /api/tasks/{id}/assign  \n    Description: Assigns a specific task to a user by their ID. Requires authentication.  \n    Add Comment\n    \n9. Method: POST  \n    URL: /api/tasks/{id}/comments  \n    Description: Adds a comment to a specific task by its ID. Requires authentica"
		},
		{
			"name": "Assign Task",
			"item": [
				{
					"name": "User registration",
					"request": {
						"method": "GET",
						"header": [],
						"description": "## Register User\n\nThis endpoint allows you to register a new user.\n\n### Request Body\n\n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `password` (string): The password for the user account.\n    \n\n#### Example\n\n``` json\n{\n    \"name\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\"\n}\n\n ```\n\n### Response\n\n- `success` (boolean): Indicates if the registration was successful.\n    \n- `message` (string): A message indicating the result of the registration.\n    \n\n#### Example\n\n``` json\n{\n    \"success\": true,\n    \"message\": \"string\"\n}\n\n ```\n\nThis endpoint allows users to register with the application.\n\n#### Request\n\n- Method: POST\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/auth/register`\n    \n- Body:\n    \n    - `name` (text, required): The name of the user.\n        \n    - `email` (text, required): The email address of the user.\n        \n    - `password` (text, required): The password for the user's account.\n        \n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"message\": \"\"}"
					},
					"response": []
				},
				{
					"name": "User Login",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Auth Login\n\nThis endpoint allows users to log in and obtain an authentication token.\n\n#### Request\n\n- Method: POST\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/auth/login`\n    \n- { \"email\": \"string\", \"password\": \"string\"}\n    \n    - `email` (string): The email address of the user.\n        \n    - `password` (string): The password of the user.\n        \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"token\": \"string\", \"data\": { \"id\": \"string\", \"name\": \"string\", \"email\": \"string\" }, \"message\": \"string\"}\n    \n    - `success` (boolean): Indicates if the login was successful.\n        \n    - `token` (string): The authentication token for the logged-in user.\n        \n    - `data` (object): Contains user information including id, name, and email.\n        \n    - `message` (string): Additional message or error information.\n        \n\n### Request Body\n\n- The request should be sent as an HTTP POST to the specified URL.\n    \n- The request body should be in raw JSON format and include the user's email and password.\n    \n\n#### Request Body Parameters\n\n- `email` (string): The user's email address.\n    \n- `password` (string): The user's password.\n    \n\n### Response\n\nThe response to the request is in JSON format and includes the following fields:\n\n- `success` (boolean): Indicates the success status of the authentication.\n    \n- `token` (string): A token for the authenticated user.\n    \n- `data` (object): Contains the user's information, including id, name, and email.\n    \n    - `id` (string): The user's unique identifier.\n        \n    - `name` (string): The user's name.\n        \n    - `email` (string): The user's email address.\n        \n- `message` (string): Any additional message related to the authentication process.\n    \n\n### JSON Schema for Response\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": { \"type\": \"boolean\" },\n    \"token\": { \"type\": \"string\" },\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": { \"type\": \"string\" },\n        \"name\": { \"type\": \"string\" },\n        \"email\": { \"type\": \"string\" }\n      }\n    },\n    \"message\": { \"type\": \"string\" }\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "assign task",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Update Task Assignment\n\nThis endpoint allows the client to update the assignment of a specific task identified by the task ID.\n\n#### Request\n\n- Method: PUT\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/tasks/676af1bcaca3c1ab04cb0650/assign`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- { \"userId\": \"676af3d5aca3c1ab04cb065a\"}\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"data\": { \"_id\": \"\", \"title\": \"\", \"description\": \"\", \"status\": \"\", \"dueDate\": \"\", \"category\": \"\", \"assignedTo\": \"\", \"priority\": \"\", \"deleted\": true, \"deletedAt\": null, \"archived\": true, \"comments\": \\[ { \"user\": \"\", \"comment\": \"\", \"_id\": \"\", \"createdAt\": \"\" } \\], \"createdAt\": \"\", \"updatedAt\": \"\", \"__v\": 0 }, \"message\": \"\"}\n    \n\n#### Example\n\n``` javascript\nconst axios = require('axios');\nconst data = {\n  userId: '676af3d5aca3c1ab04cb065a'\n};\naxios.put('https://task-management-api-ypwj.onrender.com/api/tasks/676af1bcaca3c1ab04cb0650/assign', data)\n  .then((response) => {\n    console.log(response.data);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n\n ```\n\nThis endpoint allows updating the assignment of a specific task.\n\n#### Request\n\n- Method: PUT\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/tasks/676af1bcaca3c1ab04cb0650/assign`\n    \n- Body:\n    \n    - `userId` (text, required): The ID of the user to whom the task is being assigned.\n        \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"success\": boolean,\n  \"data\": {\n    \"_id\": string,\n    \"title\": string,\n    \"description\": string,\n    \"status\": string,\n    \"dueDate\": string,\n    \"category\": string,\n    \"assignedTo\": string,\n    \"priority\": string,\n    \"deleted\": boolean,\n    \"deletedAt\": string|null,\n    \"archived\": boolean,\n    \"comments\": [\n      {\n        \"user\": string,\n        \"comment\": string,\n        \"_id\": string,\n        \"createdAt\": string\n      }\n    ],\n    \"createdAt\": string,\n    \"updatedAt\": string,\n    \"__v\": number\n  },\n  \"message\": string\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "StartFragment\n\n1. **Assign Task to User**\n    \n    - **Method:** POST\n        \n    - **URL:** `/api/tasks/{id}/assign`\n        \n    - **Description:** Assigns a specific task to a user by their ID. Requires authentication.\n        \n2. **Get Assigned Tasks**\n    \n    - **Method:** GET\n        \n    - **URL:** `/api/tasks/assigned`\n        \n    - **Description:** Retrieves a list of tasks assigned to the authenticated user. Requires authentication.\n        \n3. **Unassign Task**\n    \n    - **Method:** DELETE\n        \n    - **URL:** `/api/tasks/{id}/unassign`\n        \n    - **Description:** Unassigns a specific task from a user by their ID. Requires authentication.\n        \n\nEndFragment"
		},
		{
			"name": "Delete Task",
			"item": [
				{
					"name": "create task",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Create a New Task\n\nThis endpoint allows the client to create a new task.\n\n#### Request\n\n- Method: POST\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/tasks`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- { \"title\": \"Test delete EndPoint\", \"description\": \"testing delete endpoint in api\", \"status\": \"pending\", \"priority\": \"medium\", \"category\": \"work\", \"dueDate\": \"2024-12-24T19:00:00.000Z\" }\n    \n\n#### Response\n\n- Status: 201\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- { \"success\": true, \"data\": { \"title\": \"\", \"description\": \"\", \"status\": \"\", \"dueDate\": \"\", \"category\": \"\", \"assignedTo\": \"\", \"priority\": \"\", \"deleted\": true, \"deletedAt\": null, \"archived\": true, \"_id\": \"\", \"comments\": \\[\\], \"createdAt\": \"\", \"updatedAt\": \"\", \"__v\": 0 }, \"message\": \"\" }\n    \n\n#### Example\n\n``` json\n// Request example\n{\n    \"title\": \"Test delete EndPoint\",\n    \"description\": \"testing delete endpoint in api\",\n    \"status\": \"pending\",\n    \"priority\": \"medium\",\n    \"category\": \"work\",\n    \"dueDate\": \"2024-12-24T19:00:00.000Z\"\n}\n// Response example\n{\n    \"success\": true,\n    \"data\": {\n        \"title\": \"\",\n        \"description\": \"\",\n        \"status\": \"\",\n        \"dueDate\": \"\",\n        \"category\": \"\",\n        \"assignedTo\": \"\",\n        \"priority\": \"\",\n        \"deleted\": true,\n        \"deletedAt\": null,\n        \"archived\": true,\n        \"_id\": \"\",\n        \"comments\": [],\n        \"createdAt\": \"\",\n        \"updatedAt\": \"\",\n        \"__v\": 0\n    },\n    \"message\": \"\"\n}\n\n ```\n\nThis POST request is used to create a new task in the API. The request should include the task details such as title, description, status, priority, category, due date, etc.\n\n### Request Body\n\n- title (text, required): The title of the task.\n    \n- description (text, required): The description of the task.\n    \n- status (text, required): The status of the task (e.g., pending, completed, in progress).\n    \n- priority (text, required): The priority of the task (e.g., low, medium, high).\n    \n- category (text, required): The category of the task.\n    \n- dueDate (text, required): The due date of the task.\n    \n\n### Example\n\n``` json\n{\n    \"title\": \"Test delete EndPoint\",\n    \"description\": \"testing delete endpoint in api\",\n    \"status\": \"pending\",\n    \"priority\": \"medium\",\n    \"category\": \"work\",\n    \"dueDate\": \"2024-12-24T19:00:00.000Z\"\n}\n### API Response Format\nUpon successful creation of the task, the API responds with a status code of 201 and a JSON object containing the following fields:\n- success (boolean): Indicates if the request was successful.\n- data (object): Contains the details of the created task, including its title, description, status, due date, category, priority, etc.\n- message (string): Additional information or error message.\n### Example Response\n```json\n{\n    \"success\": true,\n    \"data\": {\n        \"title\": \"\",\n        \"description\": \"\",\n        \"status\": \"\",\n        \"dueDate\": \"\",\n        \"category\": \"\",\n        \"assignedTo\": \"\",\n        \"priority\": \"\",\n        \"deleted\": true,\n        \"deletedAt\": null,\n        \"archived\": true,\n        \"_id\": \"\",\n        \"comments\": [],\n        \"createdAt\": \"\",\n        \"updatedAt\": \"\",\n        \"__v\": 0\n    },\n    \"message\": \"\"\n}\n\n ```\n\nThis API endpoint allows you to create a new task.\n\n#### Request Body\n\n- title (string, required): The title of the task.\n    \n- description (string, required): The description of the task.\n    \n- status (string, required): The status of the task.\n    \n- priority (string, required): The priority of the task.\n    \n- category (string, required): The category of the task.\n    \n- dueDate (string, required): The due date of the task.\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"success\": boolean,\n  \"data\": {\n    \"title\": string,\n    \"description\": string,\n    \"status\": string,\n    \"dueDate\": string,\n    \"category\": string,\n    \"assignedTo\": string,\n    \"priority\": string,\n    \"deleted\": boolean,\n    \"deletedAt\": string or null,\n    \"archived\": boolean,\n    \"_id\": string,\n    \"comments\": array,\n    \"createdAt\": string,\n    \"updatedAt\": string,\n    \"__v\": number\n  },\n  \"message\": string\n}\n\n ```\n\nThe `success` field indicates if the request was successful. The `data` field contains the details of the created task, while the `message` field provides additional information about the operation."
					},
					"response": []
				},
				{
					"name": "delete task",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### Delete Task\n\nThis endpoint is used to delete a specific task identified by its unique ID.\n\n#### Request\n\n- Method: DELETE\n    \n- URL: `https://task-management-api-ypwj.onrender.com/api/tasks/676afeb6aca3c1ab04cb0662`\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- { \"success\": true, \"message\": \"\"}\n    \n\n#### Example\n\n``` bash\ncurl -X DELETE https://task-management-api-ypwj.onrender.com/api/tasks/676afeb6aca3c1ab04cb0662\n\n ```\n\nThis endpoint is used to delete a specific task identified by its unique ID.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n- `taskId` (path parameter) : The unique ID of the task to be deleted.\n    \n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\n- `success` (boolean) : Indicates if the deletion was successful.\n    \n- `message` (string) : A message providing additional information about the deletion process."
					},
					"response": []
				}
			],
			"description": "StartFragment\n\n# Delete Task Endpoints\n\nThis folder contains the endpoints related to deleting tasks. The following endpoints will be tested:\n\n1. **Delete Task by ID**\n    \n    - **Method:** DELETE\n        \n    - **URL:** `/api/tasks/{id}`\n        \n    - **Description:** Deletes a specific task by its ID. Requires authentication.\n        \n2. **Bulk Delete Tasks**\n    \n    - **Method:** DELETE\n        \n    - **URL:** `/api/tasks`\n        \n    - **Description:** Deletes multiple tasks based on provided criteria (e.g., status, due date). Requires authentication.\n        \n3. **Delete Completed Tasks**\n    \n    - **Method:** DELETE\n        \n    - **URL:** `/api/tasks/completed`\n        \n    - **Description:** Deletes all tasks that have been marked as completed. Requires authentication.\n        \n\nEndFragment"
		}
	]
}